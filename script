local uiLoader = loadstring(game:HttpGet('https://raw.githubusercontent.com/402client/402script/refs/heads/main/uilib'))
local ui = uiLoader({
    rounding = false, 
    theme = 'cherry', 
    smoothDragging = false
})

ui.autoDisableToggles = true 

local window = ui.newWindow({
    text = '910 client [Beta]', 
    resize = true, 
    size = Vector2.new(550, 376), 
})

local menu = window:addMenu({
    text = 'Legit' 
})
do 
    local section = menu:addSection({
        text = 'section 1', 
        side = 'auto', 
        showMinButton = true, 
    })
    
    do 
        section:addLabel({
            text = 'text' 
        })
        
        local toggle = section:addToggle({
            text = 'toggle', 
            state = false 
        })
        
        toggle:bindToEvent('onToggle', function(newState) 
            ui.notify({
                title = 'toggle',
                message = 'Toggle was toggled to ' .. tostring(newState),
                duration = 3
            })
        end)
        
        section:addButton({
            text = 'button (small)', 
            style = 'small' 
        }):bindToEvent('onClick', function() 
            ui.notify({
                title = 'button',
                message = 'The button got clicked!',
                duration = 3
            })
        end)
        
        section:addButton({
            text = 'button (large)', 
            style = 'large' 
        }, function() 
            ui.notify({
                title = 'button',
                message = 'The large button got clicked!',
                duration = 3
            })
        end):setTooltip('this is a large button')
        
        local hotkey = section:addHotkey({
            text = 'hotkey'
        })
        hotkey:setHotkey(Enum.KeyCode.G)
        hotkey:setTooltip('This is a hotkey linked to the toggle!')
        hotkey:linkToControl(toggle)
    end
    
    local section = menu:addSection({
        text = 'section 2',
        side = 'right',
        showMinButton = false
    })
    do 
        section:addSlider({
            text = 'slider',
            min = 1,
            max = 150,
            step = 0.01,
            val = 50
        }, function(newValue) 
            print(newValue)
        end):setTooltip('Heres a slider!')
        
        section:addColorPicker({
            text = 'color picker',
            color = Color3.fromRGB(255, 0, 0)
        }, function(newColor) 
            print(newColor)
        end)
        
        section:addTextbox({
            text = 'textbox'
        }):bindToEvent('onFocusLost', function(text) 
            ui.notify({
                title = 'textbox',
                message = text,
                duration = 4
            })
        end)
    end
    
end

local menu = window:addMenu({
    text = 'Rage' 
})

local visualMenu = window:addMenu({
    text = 'Visual' 
})
do 
    local section = visualMenu:addSection({
        text = 'Esp', 
        side = 'auto', 
        showMinButton = true, 
    })
    
    do 
        section:addLabel({
            text = 'Box' 
        })
        
        local espToggle = section:addToggle({
            text = 'ESP Toggle', 
            state = false 
        })
        
        local skeletonToggle = section:addToggle({
            text = 'Skeleton Toggle', 
            state = false 
        })
        
        local boxColorPicker = section:addColorPicker({
            text = 'Box Color',
            color = Color3.fromRGB(255, 0, 0) 
        })
        
        local teamColorToggle = section:addToggle({
            text = 'Team Color',
            state = true -- По умолчанию включено
        })
        
        local teamCheckToggle = section:addToggle({
            text = 'Team Check',
            state = false -- По умолчанию выключено
        })
        
        local onlyVisibleToggle = section:addToggle({
            text = 'Only Visible',
            state = false -- По умолчанию выключено
        })
        
        local settings = {
            defaultcolor = Color3.fromRGB(255, 0, 0),
            teamcheck = teamCheckToggle.state,
            teamcolor = teamColorToggle.state,
            onlyvisible = onlyVisibleToggle.state
        };

        local runService = game:GetService("RunService");
        local players = game:GetService("Players");
        local localPlayer = players.LocalPlayer;
        local camera = workspace.CurrentCamera;

        local newVector2, newColor3, newDrawing = Vector2.new, Color3.new, Drawing.new;
        local tan, rad = math.tan, math.rad;
        local round = function(...) 
            local a = {}
            for i, v in next, table.pack(...) do
                a[i] = math.round(v)
            end
            return unpack(a)
        end

        local wtvp = function(...)
            local a, b = camera:WorldToViewportPoint(...)
            return newVector2(a.X, a.Y), b, a.Z
        end

        local espCache = {};
        local espEnabled = false;
        local skeletonEnabled = false;

        local function isPlayerVisible(player)
            local character = player.Character;
            if not character then return false end

            local rootPart = character:FindFirstChild("HumanoidRootPart");
            if not rootPart then return false end

            local origin = camera.CFrame.Position;
            local direction = (rootPart.Position - origin).Unit;
            local ray = Ray.new(origin, direction * 1000);

            local hit, position = workspace:FindPartOnRayWithIgnoreList(ray, {localPlayer.Character}, false);
            if hit and hit:IsDescendantOf(character) then
                return true
            end

            return false
        end

        local function createEsp(player)
            local drawings = {};
            
            drawings.box = newDrawing("Square");
            drawings.box.Thickness = 1;
            drawings.box.Filled = false;
            drawings.box.Color = settings.defaultcolor;
            drawings.box.Visible = false;
            drawings.box.ZIndex = 2;

            drawings.boxoutline = newDrawing("Square");
            drawings.boxoutline.Thickness = 0;
            drawings.boxoutline.Filled = false;
            drawings.boxoutline.Color = newColor3();
            drawings.boxoutline.Visible = false;
            drawings.boxoutline.ZIndex = 1;

            drawings.skeleton = {};
            for _, part in pairs({"Head", "LeftUpperArm", "RightUpperArm", "LeftLowerArm", "RightLowerArm", "LeftUpperLeg", "RightUpperLeg", "LeftLowerLeg", "RightLowerLeg", "Torso"}) do
                drawings.skeleton[part] = newDrawing("Line");
                drawings.skeleton[part].Thickness = 1;
                drawings.skeleton[part].Color = settings.defaultcolor;
                drawings.skeleton[part].Visible = false;
                drawings.skeleton[part].ZIndex = 2;
            end

            espCache[player] = drawings;
        end

        local function removeEsp(player)
            if espCache[player] then
                for _, drawing in next, espCache[player] do
                    if type(drawing) == "table" then
                        for _, line in pairs(drawing) do
                            line:Remove();
                        end
                    else
                        drawing:Remove();
                    end
                end
                espCache[player] = nil;
            end
        end

        local function updateEsp(player, esp)
            local character = player and player.Character;
            if character then
                local cframe = character:GetModelCFrame();
                local position, visible, depth = wtvp(cframe.Position);
                local isVisible = isPlayerVisible(player);

                esp.box.Visible = visible and espEnabled and (not settings.onlyvisible or isVisible);
                esp.boxoutline.Visible = visible and espEnabled and (not settings.onlyvisible or isVisible);

                if cframe and visible and (not settings.onlyvisible or isVisible) then
                    local scaleFactor = 1 / (depth * tan(rad(camera.FieldOfView / 2)) * 2) * 1000;
                    local width, height = round(4 * scaleFactor, 6 * scaleFactor);
                    local x, y = round(position.X, position.Y);

                    esp.box.Size = newVector2(width, height);
                    esp.box.Position = newVector2(round(x - width/2), round(y - height/2));

                    if settings.teamcolor then
                        esp.box.Color = player.TeamColor.Color
                    else
                        esp.box.Color = settings.defaultcolor
                    end

                    esp.boxoutline.Size = esp.box.Size;
                    esp.boxoutline.Position = esp.box.Position;

                    if skeletonEnabled then
                        local function updateSkeletonPart(partName, fromPart, toPart)
                            local from = character:FindFirstChild(fromPart)
                            local to = character:FindFirstChild(toPart)
                            if from and to then
                                local fromPos = from.Position
                                local toPos = to.Position
                                local fromScreen, _, _ = wtvp(fromPos)
                                local toScreen, _, _ = wtvp(toPos)
                                if fromScreen and toScreen then
                                    esp.skeleton[partName].From = newVector2(fromScreen.X, fromScreen.Y)
                                    esp.skeleton[partName].To = newVector2(toScreen.X, toScreen.Y)
                                    esp.skeleton[partName].Visible = true
                                else
                                    esp.skeleton[partName].Visible = false
                                end
                            else
                                esp.skeleton[partName].Visible = false
                            end
                        end

                        updateSkeletonPart("Head", "Head", "Torso")
                        updateSkeletonPart("LeftUpperArm", "LeftUpperArm", "Torso")
                        updateSkeletonPart("RightUpperArm", "RightUpperArm", "Torso")
                        updateSkeletonPart("LeftLowerArm", "LeftLowerArm", "LeftUpperArm")
                        updateSkeletonPart("RightLowerArm", "RightLowerArm", "RightUpperArm")
                        updateSkeletonPart("LeftUpperLeg", "LeftUpperLeg", "Torso")
                        updateSkeletonPart("RightUpperLeg", "RightUpperLeg", "Torso")
                        updateSkeletonPart("LeftLowerLeg", "LeftLowerLeg", "LeftUpperLeg")
                        updateSkeletonPart("RightLowerLeg", "RightLowerLeg", "RightUpperLeg")
                    else
                        for _, line in pairs(esp.skeleton) do
                            line.Visible = false
                        end
                    end
                end
            else
                esp.box.Visible = false
                esp.boxoutline.Visible = false
                for _, line in pairs(esp.skeleton) do
                    line.Visible = false
                end
            end
        end

        for _, player in next, players:GetPlayers() do
            if player ~= localPlayer then
                createEsp(player)
            end
        end

        players.PlayerAdded:Connect(function(player)
            createEsp(player)
        end)

        players.PlayerRemoving:Connect(function(player)
            removeEsp(player)
        end)

        runService:BindToRenderStep("esp", Enum.RenderPriority.Camera.Value, function()
            if not espEnabled then return end

            for player, drawings in next, espCache do
                if settings.teamcheck and player.Team == localPlayer.Team then
                    continue
                end

                updateEsp(player, drawings)
            end
        end)

        -- События для тогглеров
        espToggle:bindToEvent('onToggle', function(newState)
            espEnabled = newState
            for _, drawings in next, espCache do
                drawings.box.Visible = newState
                drawings.boxoutline.Visible = newState
            end
        end)

        skeletonToggle:bindToEvent('onToggle', function(newState)
            skeletonEnabled = newState
            for _, drawings in next, espCache do
                for _, line in pairs(drawings.skeleton) do
                    line.Visible = newState
                end
            end
        end)

        boxColorPicker:bindToEvent('onColorChanged', function(newColor)
            settings.defaultcolor = newColor
            for _, drawings in next, espCache do
                drawings.box.Color = newColor
            end
        end)

        teamColorToggle:bindToEvent('onToggle', function(newState)
            settings.teamcolor = newState
            for _, drawings in next, espCache do
                if settings.teamcolor then
                    drawings.box.Color = player.TeamColor.Color
                else
                    drawings.box.Color = settings.defaultcolor
                end
            end
        end)

        teamCheckToggle:bindToEvent('onToggle', function(newState)
            settings.teamcheck = newState
        end)

        onlyVisibleToggle:bindToEvent('onToggle', function(newState)
            settings.onlyvisible = newState
        end)
    end
end
